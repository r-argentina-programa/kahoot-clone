const Sequelize = require('sequelize');
const TriviaModel = require('../../model/triviaModel');
const AnswerModel = require('../../model/answerModel');
const QuestionModel = require('../../model/questionModel');
const GameModel = require('../../model/gameModel');
const PlayerModel = require('../../model/playerModel');
const PlayerAnswerModel = require('../../model/playerAnswerModel');
const KahootRepository = require('../repository');

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: ':memory:',
});

let kahootRepository;

beforeAll(() => {
  TriviaModel.setup(sequelize);
  QuestionModel.setup(sequelize);
  AnswerModel.setup(sequelize);
  GameModel.setup(sequelize);
  PlayerModel.setup(sequelize);
  PlayerAnswerModel.setup(sequelize);

  TriviaModel.setupAssociations(QuestionModel, GameModel);
  QuestionModel.setupAssociations(AnswerModel);
  GameModel.setupAssociations(PlayerModel);
  PlayerModel.setupAssociations(PlayerAnswerModel);
  AnswerModel.setupAssociations(PlayerAnswerModel);
});

beforeEach(async () => {
  await sequelize.sync({ force: true });

  const trivias = await TriviaModel.bulkCreate([
    {
      name: 'trivia1',
    },
    {
      name: 'trivia2',
    },
  ]);

  const questions = await QuestionModel.bulkCreate([
    {
      fk_trivia: trivias[0].id,
      description: 'Which is the biggest planet in the Solar System?',
    },
  ]);

  await AnswerModel.bulkCreate([
    {
      description: 'JUPITER',
      fk_question: questions[0].id,
      is_correct: true,
    },
  ]);

  kahootRepository = new KahootRepository(
    AnswerModel,
    QuestionModel,
    TriviaModel,
    GameModel,
    PlayerModel,
    PlayerAnswerModel
  );
});

describe('Repository tests', () => {
  test('getAllTrivias returns the complete trivia list', async () => {
    const triviaList = await kahootRepository.getAllTrivias();
    expect(triviaList.length).toEqual(2);
  });

  test('getTriviaById returns the trivia with the given id', async () => {
    const triviaMock = {
      id: 1,
      name: 'trivia1',
      questions: [
        {
          id: 1,
          triviaId: 1,
          description: 'Which is the biggest planet in the Solar System?',
          answers: [{ id: 1, description: 'JUPITER', questionId: 1, isCorrect: true }],
        },
      ],
    };

    const trivia = await kahootRepository.getTriviaById(1);

    expect(trivia).toEqual(triviaMock);
  });

  test('saveGame saves a game', async () => {
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    const NEW_AUTOGENERATED_ID = 1;

    const game = await kahootRepository.saveGame(gameMock);
    expect(game.id).toBe(NEW_AUTOGENERATED_ID);
  });

  test('savePlayer saves a player', async () => {
    const playerMock = { gameId: 1, playerName: 'someName', sessionId: 'someString' };
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    await kahootRepository.saveGame(gameMock);
    const NEW_AUTOGENERATED_ID = 1;

    const player = await kahootRepository.savePlayer(playerMock);
    expect(player.id).toBe(NEW_AUTOGENERATED_ID);
  });

  test('savePlayerAnswer saves an answer by a player', async () => {
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    await kahootRepository.saveGame(gameMock);

    const playerAnswerMock = { playerId: 1, answerId: 1, score: 10 };
    const playerMock = { gameId: 1, playerName: 'someName', sessionId: 'someString' };
    await kahootRepository.savePlayer(playerMock);
    const NEW_AUTOGENERATED_ID = 1;

    const playerAnswer = await kahootRepository.savePlayerAnswer(playerAnswerMock);
    expect(playerAnswer.id).toBe(NEW_AUTOGENERATED_ID);
  });

  test('setGameToEnded sets the ongoing property from true to false', async () => {
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    const ongoingGame = await kahootRepository.saveGame(gameMock);
    const gameEnded = await kahootRepository.setGameToEnded(ongoingGame.id);
    expect(gameEnded.ongoing).toBe(false);
  });

  test('getMostPlayedTrivias returns the most played trivias', async () => {
    const gameMock1 = { triviaId: 1, namespaceName: 'trivia1', ongoing: false };
    await kahootRepository.saveGame(gameMock1);

    const gameMock2 = { triviaId: 1, namespaceName: 'trivia1', ongoing: false };
    await kahootRepository.saveGame(gameMock2);

    const gameMock3 = { triviaId: 2, namespaceName: 'trivia2', ongoing: false };
    await kahootRepository.saveGame(gameMock3);

    let mostPlayedTrivias = await kahootRepository.getMostPlayedTrivias();

    mostPlayedTrivias = mostPlayedTrivias.map((elem) => elem.toJSON());

    expect(mostPlayedTrivias).toEqual([
      { fk_trivia: 1, trivias_played: 2 },
      { fk_trivia: 2, trivias_played: 1 },
    ]);
  });

  test('getmostDifficultQuestions returns the most dificult questions', async () => {
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    await kahootRepository.saveGame(gameMock);

    const playerMock = { gameId: 1, playerName: 'someName', sessionId: 'someString' };
    const playerAnswerMock = { playerId: 1, answerId: 1, score: 0 };

    await kahootRepository.savePlayer(playerMock);
    await kahootRepository.savePlayerAnswer(playerAnswerMock);

    const getmostDifficultQuestions = await kahootRepository.getmostDifficultQuestions();

    expect(getmostDifficultQuestions).toEqual([
      { description: 'Which is the biggest planet in the Solar System?', fk_question: 1, score: 0 },
    ]);
  });

  test('getTotalTriviaNumber returns the total ammount of trivias', async () => {
    const twoTrivias = await kahootRepository.getTotalTriviaNumber();
    expect(twoTrivias).toBe(2);

    TriviaModel.create({
      name: 'trivia3',
    });
    const threeTrivias = await kahootRepository.getTotalTriviaNumber();
    expect(threeTrivias).toBe(3);
  });

  test('getTotalPlayers returns the total ammount of players', async () => {
    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    await kahootRepository.saveGame(gameMock);

    const zeroPlayers = await kahootRepository.getTotalPlayers();
    expect(zeroPlayers).toBe(0);

    const playerMock = { gameId: 1, playerName: 'someName', sessionId: 'someString' };
    await kahootRepository.savePlayer(playerMock);

    const onePlayer = await kahootRepository.getTotalPlayers();
    expect(onePlayer).toBe(1);
  });

  test('getTotalGames returns the total ammount of games', async () => {
    const zeroGames = await kahootRepository.getTotalGames();
    expect(zeroGames).toBe(0);

    const gameMock = { triviaId: 1, namespaceName: 'someName', ongoing: true };
    await kahootRepository.saveGame(gameMock);

    const oneGame = await kahootRepository.getTotalGames();
    expect(oneGame).toBe(1);
  });
});
